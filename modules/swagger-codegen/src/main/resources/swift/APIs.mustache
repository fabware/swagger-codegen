// APIs.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public class {{projectName}}API {
    public static var basePath = "{{basePath}}"
    public static var credential: NSURLCredential?
    public static var customHeaders: [String:String] = [:]
    static var requestBuilderFactory: RequestBuilderFactory = AlamofireRequestBuilderFactory()
}

public class APIBase {
    func toParameters(encodable: JSONEncodable?) -> [String: AnyObject]? {
        let encoded: AnyObject? = encodable?.encodeToJSON()

        if encoded! is [AnyObject] {
            var dictionary = [String:AnyObject]()
            for (index, item) in (encoded as! [AnyObject]).enumerate() {
                dictionary["\(index)"] = item
            }
            return dictionary
        } else {
            return encoded as? [String:AnyObject]
        }
    }
}

public class RequestBuilder<T> {
    var credential: NSURLCredential?
    var headers: [String:String] = [:]
    let parameters: [String:AnyObject]?
    let isBody: Bool
    let method: String
    let URLString: String

    required public init(method: String, URLString: String, parameters: [String:AnyObject]?, isBody: Bool) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.isBody = isBody
        var logString: String = ">>> curl -X"

        ServiceManager.updateUserDate()
        addHeaders({{projectName}}API.customHeaders)

        if kAPILogTestEnabled {
            do {
                let options = NSJSONWritingOptions()
                var jsonString = ""
                if parameters!.count > 0 {
                    let data = try NSJSONSerialization.dataWithJSONObject(parameters!, options: options)
                    jsonString = String.init(data: data, encoding: NSUTF8StringEncoding)!
                }
                let headersString = SwaggerClientAPI.customHeaders.keys.reduce("") { (last, key) -> String in
                    var resultString: String
                    #if DEBUG
                        resultString = last + " -H \"\(key):\(SwaggerClientAPI.customHeaders[key]!)\""
                        return resultString
                    #else
                        // 在release下不打印用户的密码
                        if ["password", "pwd", "passwd"].contains(key) {
                            resultString = last + " -H \"\(key):***\""
                        } else {
                            resultString = last + " -H \"\(key):\(SwaggerClientAPI.customHeaders[key]!)\""
                        }
                        return resultString
                    #endif
                }
                logString += method
                logString += " "
                logString += URLString
                logString += " -d '"
                logString += jsonString
                logString += "' "
                logString += headersString
                BFLog("rpc", logString)
            } catch let error as NSError {
                BFLog("rpc", "log http request error: \(error)")
            }
        }
    }

    public func addHeaders(aHeaders:[String:String]) {
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }

    public func execute(completion: (response: Response<T>?, error: ErrorType?) -> Void) { }

    public func addHeader(name name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }

    public func addCredential() -> Self {
        self.credential = {{projectName}}API.credential
        return self
    }
}

protocol RequestBuilderFactory {
    func getBuilder<T>() -> RequestBuilder<T>.Type
}
